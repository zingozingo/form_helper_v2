/**
 * Content script for AI Form Helper extension
 * 
 * This script is designed to work with site-blocker.js which runs at document_start.
 * If site-blocker.js determines this is not a form site, this script will not execute any functionality.
 */

// ********************************************
// SITE BLOCKING CHECK - DO NOT MODIFY
// ********************************************

// Safe console logging
function safeLog(message, data = {}) {
  try {
    console.log(`AI Form Helper: ${message}`, {
      timestamp: new Date().toISOString(),
      ...data
    });
  } catch (e) {
    // Ignore logging errors
  }
}

// Check global variables set by site-blocker.js
if (window.FORM_HELPER_BLOCKED_SITE === true || 
    window.FORM_HELPER_TERMINATED === true || 
    window.FORM_HELPER_SHOULD_BLOCK === true) {
  
  safeLog('Extension disabled on this site by site-blocker.js');
  
  // Define dummy functions for anything that might be called
  window.formHelperNoop = function() { return false; };
  window.initializeFormHelper = window.formHelperNoop;
  window.detectForms = window.formHelperNoop;
  window.scanFormsForPanel = window.formHelperNoop;
  window.processEnhancedFieldDetectorResults = window.formHelperNoop;
  window.emergencyTerminate = window.formHelperNoop;
  
  // Exit early - don't execute any functionality
  // This approach prevents throwing errors while safely stopping execution
} 
// Only continue if site is not blocked
else {
  // ============================================
  // MAIN EXTENSION CODE STARTS HERE
  // ============================================
  
  // Configuration
  const API_URL = 'http://127.0.0.1:8000/api/process-form';
  
  // Log that the script is loaded
  safeLog("Content script loaded on form site", {
    url: window.location.href,
    userAgent: navigator.userAgent
  });
  
  // Debug mode state
  let debugMode = false;
  
  // Browser detection
  const browserInfo = {
    isChrome: navigator.userAgent.indexOf("Chrome") > -1,
    isFirefox: navigator.userAgent.indexOf("Firefox") > -1,
    isSafari: navigator.userAgent.indexOf("Safari") > -1 && navigator.userAgent.indexOf("Chrome") === -1,
    isEdge: navigator.userAgent.indexOf("Edg") > -1,
    isOpera: navigator.userAgent.indexOf("OPR") > -1
  };
  
  // Log browser info
  safeLog("Browser detection", browserInfo);
  
  // Initialize form helper when the DOM is ready
  function initializeFormHelper() {
    safeLog("Initializing Form Helper");
    
    // Listen for activation events
    window.addEventListener('formHelperActivate', function(e) {
      safeLog("Form Helper activation event received", {
        mode: e.detail ? e.detail.mode : 'unknown'
      });
      
      // Run form detection
      detectForms(e.detail && e.detail.mode === 'developer');
    });
    
    // Perform initial scan
    detectForms(false);
  }
  
  // Detect forms on the page
  function detectForms(developerMode) {
    safeLog("Detecting forms", { developerMode });
    
    try {
      // Try Enhanced Field Detector first (comprehensive detector)
      let formData;
      if (window.EnhancedFieldDetector && typeof window.EnhancedFieldDetector.detectFields === 'function') {
        safeLog('Using EnhancedFieldDetector');
        formData = processEnhancedFieldDetectorResults(window.EnhancedFieldDetector.detectFields());
      }
      // Fall back to original FieldDetector
      else if (window.FieldDetector && typeof window.FieldDetector.scanForFields === 'function') {
        safeLog('Using FieldDetector');
        formData = window.FieldDetector.scanForFields();
      } else {
        // Fall back to basic scan method
        safeLog('Using basic scan method');
        formData = scanFormsForPanel(false);
      }
      
      // Check if we found any forms
      if (formData && formData.fields && formData.fields.length > 0) {
        safeLog('Form data found', { 
          formId: formData.formId,
          fieldsCount: formData.fields.length
        });
        
        // Notify background script
        try {
          chrome.runtime.sendMessage({
            action: 'formDetected',
            formData: formData
          });
        } catch (e) {
          // Ignore messaging errors
        }
      } else {
        safeLog('No forms found');
        
        // Notify background script
        try {
          chrome.runtime.sendMessage({
            action: 'noFormsFound'
          });
        } catch (e) {
          // Ignore messaging errors
        }
      }
    } catch (e) {
      safeLog('Error detecting forms', { error: e.message });
    }
  }
  
  // Process results from EnhancedFieldDetector
  function processEnhancedFieldDetectorResults(detectorResults) {
    // Default empty form if results are invalid
    if (!detectorResults || !detectorResults.fields || !Array.isArray(detectorResults.fields)) {
      return {
        formId: 'form_' + Date.now(),
        formType: 'unknown',
        fields: [],
        formContext: { form_type: "unknown" }
      };
    }
    
    // Return the results directly
    return detectorResults;
  }
  
  // Basic scan for forms
  function scanFormsForPanel(forceDetect) {
    safeLog("Running basic form scan", { forceDetect });
    
    // Get all forms on the page
    const forms = document.forms;
    const fields = [];
    
    // Process each form
    for (let i = 0; i < forms.length; i++) {
      const form = forms[i];
      
      // Process each input in the form
      const inputs = form.querySelectorAll('input, select, textarea');
      for (let j = 0; j < inputs.length; j++) {
        const input = inputs[j];
        
        // Skip hidden and button inputs
        if (input.type === 'hidden' || input.type === 'submit' || input.type === 'button') {
          continue;
        }
        
        // Add field to the list
        fields.push({
          name: input.name || input.id || '',
          id: input.id || '',
          type: input.type || input.tagName.toLowerCase(),
          label: input.placeholder || input.name || 'Field ' + (j + 1),
          required: input.required || false
        });
      }
    }
    
    // Return form data
    return {
      formId: 'form_' + Date.now(),
      formType: 'html',
      fields: fields,
      formContext: { form_type: "html_form" }
    };
  }
  
  // Listen for messages from the background script or panel
  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    safeLog('Message received', { action: request.action });
    
    // Handle scan forms request
    if (request.action === 'scanForms') {
      detectForms(false);
      sendResponse({ success: true });
      return true;
    }
    
    // Handle debug mode toggle
    if (request.action === 'enableDebugMode') {
      debugMode = true;
      safeLog('Debug mode enabled');
      detectForms(true);
      sendResponse({ success: true });
      return true;
    }
    
    // Always return true for async responses
    return true;
  });
  
  // Run on page load
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    // Run after a short delay to ensure everything is loaded
    setTimeout(initializeFormHelper, 500);
  } else {
    // Wait for page to load
    document.addEventListener('DOMContentLoaded', initializeFormHelper);
  }
}