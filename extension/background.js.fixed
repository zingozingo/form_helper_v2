/**
 * Background script for AI Form Helper extension
 */

// Enhanced logging
function safeLog(message, data = {}) {
  console.log(`AI Form Helper: ${message}`, {
    timestamp: new Date().toISOString(),
    ...data
  });
}

// Error logging
function safeError(message, error = null) {
  console.error(`AI Form Helper Error: ${message}`, {
    timestamp: new Date().toISOString(),
    error: error ? (error.message || error) : null
  });
}

// List of blocked site hostnames for quick reference
const BLOCKED_SITES = [
  'instagram.com',
  'facebook.com',
  'linkedin.com',
  'twitter.com',
  'x.com',
  'youtube.com',
  'tiktok.com',
  'pinterest.com',
  'reddit.com'
];

// List of allowed form sites
const FORM_SITES = [
  'testpages.herokuapp.com',
  'form-test.com',
  'forms.gle',
  'forms.office.com',
  'docs.google.com/forms',
  'jotform.com',
  'formstack.com',
  'typeform.com',
  'surveymonkey.com',
  'localhost',
  '127.0.0.1'
];

// Check if a URL is for a blocked site
function isBlockedSite(url) {
  try {
    // Create URL object to extract hostname
    const urlObj = new URL(url);
    const hostname = urlObj.hostname.toLowerCase();
    
    // Check against blocklist
    for (const site of BLOCKED_SITES) {
      if (hostname === site || hostname.endsWith('.' + site)) {
        return true;
      }
    }
    
    return false;
  } catch (e) {
    // If error parsing URL, default to false
    safeError("Error checking blocked status", e);
    return false;
  }
}

// Check if a URL is for a form site
function isFormSite(url) {
  try {
    // Create URL object to extract hostname
    const urlObj = new URL(url);
    const hostname = urlObj.hostname.toLowerCase();
    
    // Check against form site list
    for (const site of FORM_SITES) {
      if (hostname === site || hostname.endsWith('.' + site) || hostname.includes(site)) {
        return true;
      }
    }
    
    return false;
  } catch (e) {
    // If error parsing URL, default to false
    safeError("Error checking form site status", e);
    return false;
  }
}

// Update the extension icon for a tab
function updateExtensionIcon(tabId, isBlocked) {
  try {
    if (isBlocked) {
      // Set icon to blocked state
      chrome.action.setBadgeText({
        text: "âœ•",
        tabId: tabId
      });
      
      chrome.action.setBadgeBackgroundColor({
        color: "#D32F2F",
        tabId: tabId
      });
      
      // Update popup for blocked sites
      chrome.action.setPopup({
        popup: "blocked-popup.html",
        tabId: tabId
      });
    } else {
      // Set icon to normal state
      chrome.action.setBadgeText({
        text: "",
        tabId: tabId
      });
    }
  } catch (e) {
    // Ignore errors updating icon
    safeError("Error updating extension icon", e);
  }
}

// Check a tab and update icon status
function checkTab(tabId, url) {
  if (!tabId || !url) return;
  
  // Determine if this tab should be blocked
  const blocked = !isFormSite(url) || isBlockedSite(url);
  
  // Update icon
  updateExtensionIcon(tabId, blocked);
  
  // Store blocked status
  try {
    chrome.storage.local.set({
      [`tab_${tabId}_blocked`]: blocked,
      [`tab_${tabId}_url`]: url
    });
  } catch (e) {
    // Ignore storage errors
  }
}

// Initialize when extension is installed
chrome.runtime.onInstalled.addListener(() => {
  safeLog('Extension installed or updated');
  
  // Set up context menus
  try {
    chrome.contextMenus.create({
      id: 'formHelperMenu',
      title: 'AI Form Helper',
      contexts: ['page']
    });
    
    chrome.contextMenus.create({
      id: 'scanForms',
      parentId: 'formHelperMenu',
      title: 'Scan for Forms',
      contexts: ['page']
    });
  } catch (e) {
    safeError('Error creating context menus', e);
  }
});

// Listen for tab updates to check site status
chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
  // When tab URL changes or completes loading
  if (changeInfo.url || changeInfo.status === 'complete') {
    const url = changeInfo.url || tab.url;
    if (url && url.startsWith('http')) {
      checkTab(tabId, url);
    }
  }
});

// Listen for messages from content scripts
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  // Handle site blocked notifications
  if (message.action === 'siteBlocked') {
    safeLog('Site blocked notification received', {
      url: message.url,
      hostname: message.hostname
    });
    
    if (sender.tab && sender.tab.id) {
      updateExtensionIcon(sender.tab.id, true);
    }
    
    // Send response if needed
    if (sendResponse) {
      sendResponse({ success: true });
    }
    
    return true; // Keep channel open for async response
  }
  
  // Handle form detected notifications
  if (message.action === 'formDetected') {
    safeLog('Form detected notification received', {
      url: sender.tab ? sender.tab.url : 'unknown',
      formId: message.formId
    });
    
    if (sender.tab && sender.tab.id) {
      updateExtensionIcon(sender.tab.id, false);
    }
    
    // Send response if needed
    if (sendResponse) {
      sendResponse({ success: true });
    }
    
    return true; // Keep channel open for async response
  }
  
  return false; // Not handled
});

// Handle clicks on the extension icon
chrome.action.onClicked.addListener((tab) => {
  if (!tab || !tab.url || !tab.id) return;
  
  try {
    // Check if tab is blocked
    chrome.storage.local.get([`tab_${tab.id}_blocked`], (result) => {
      const isBlocked = result[`tab_${tab.id}_blocked`];
      
      if (isBlocked) {
        // If blocked, show a notification
        safeLog('Extension icon clicked on blocked site', {
          url: tab.url
        });
      } else {
        // Open the side panel
        if (chrome.sidePanel) {
          chrome.sidePanel.open({ tabId: tab.id });
        }
        
        // Trigger form scan
        chrome.tabs.sendMessage(tab.id, { 
          action: 'scanForms' 
        }).catch(() => {
          // Ignore messaging errors - content script might not be loaded
        });
      }
    });
  } catch (e) {
    safeError('Error handling icon click', e);
  }
});

// Handle context menu clicks
chrome.contextMenus.onClicked.addListener((info, tab) => {
  if (!tab || !tab.id) return;
  
  if (info.menuItemId === 'scanForms') {
    // Check if tab is blocked first
    try {
      chrome.storage.local.get([`tab_${tab.id}_blocked`], (result) => {
        const isBlocked = result[`tab_${tab.id}_blocked`];
        
        if (!isBlocked) {
          // Open the side panel
          if (chrome.sidePanel) {
            chrome.sidePanel.open({ tabId: tab.id });
          }
          
          // Trigger form scan
          chrome.tabs.sendMessage(tab.id, { 
            action: 'scanForms',
            forceDetect: true
          }).catch(() => {
            // Ignore messaging errors - content script might not be loaded
          });
        }
      });
    } catch (e) {
      safeError('Error handling context menu click', e);
    }
  }
});